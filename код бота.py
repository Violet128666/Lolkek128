from datetime import datetime, timedelta
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
from telethon import functions
import re
import asyncio
import sqlite3
import sys
import telebot
import os
import json
from datetime import datetime
import time
import requests
import subprocess
import random
from telebot import apihelper
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import telebot
from telebot import types
import random
import os
import json


accounts = [
    
    {
        'api_id': '21333763',
        'api_hash': '70f581935d27a46f7d36ea0fb9e77ea1',
        'phone': '79232691811',
        'session_name': 'session_name_1121'},
{	'api_id': '27164998',
        'api_hash': 		'f557bd347d28b0892e9f504f7b392a7b',
        'phone': '79894845564',
        'session_name': 'session_name_1'
    }
    

]

allowed_users_file = 'allowed_users.json'
allowed_users = []
admin_ids = [6407049511]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_id = 6407049511
user_ids_file = 'user_ids.json'

#–∞–π–¥–∏ –∞–¥–º–∏–Ω–æ–≤ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ!


def init_db():
    conn = sqlite3.connect('logs.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT,
            timestamp TEXT,
            target_username TEXT
        )
    ''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∏
def add_log(username, target_username):
    conn = sqlite3.connect('logs.db')
    cursor = conn.cursor()
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('''
        INSERT INTO logs (username, timestamp, target_username) VALUES (?, ?, ?)
    ''', (username, timestamp, target_username))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
def get_logs():
    conn = sqlite3.connect('logs.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM logs ORDER BY id DESC')
    logs = cursor.fetchall()
    conn.close()
    return logs
  


def add_user_id(user_id):
    """Adds a user ID to the 'user_ids.json' file."""
    try:
        with open(user_ids_file, 'r') as file:
            user_ids = json.load(file)
    except FileNotFoundError:
        user_ids = {}
    user_ids[str(user_id)] = True  # Use True as a placeholder value
    with open(user_ids_file, 'w') as file:
        json.dump(user_ids, file, indent=4)


def load_allowed_users():
    global allowed_users
    try:
        with open(allowed_users_file, 'r') as f:
            data = json.load(f)
            allowed_users = data.get("allowed_users", [])
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        allowed_users = []  

def save_allowed_users():
    with open(allowed_users_file, 'w') as f:
        json.dump({"allowed_users": allowed_users}, f)

load_allowed_users()

BOT_TOKEN = '6780798896:AAFfNdOnMO8UiJBQNsatDHchGCw2ch95mR0'
bot = telebot.TeleBot(BOT_TOKEN)
last_request_time = {}


    
@bot.message_handler(commands=['list'])
def listapp(msg):
    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    count = len(accounts)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(
        telebot.types.InlineKeyboardButton("‚≠ê–°–æ–∑–¥–∞—Ç–µ–ª—å", url='https://t.me/+Jjvcy_gFSQQzYzky'),
        telebot.types.InlineKeyboardButton("üíé–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url='https://t.me/Vis1noser_bot?start=1')
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.reply_to(msg, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {count}", reply_markup=keyboard)
    
    

@bot.callback_query_handler(func=lambda call: call.data == "show_logs")
def show_logs(call):
    logs = get_logs()
    if logs:
        response = "–ñ–∞–ª–æ–±—ã:\n"
        for log in logs:
            response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {log[1]}, –í—Ä–µ–º—è: {log[2]}, –¶–µ–ª—å: {log[3]}\n"
        bot.send_message(call.message.chat.id, response)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∂–∞–ª–æ–±–∞—Ö.")
        

@bot.message_handler(commands=['add'])
def add_allowed_user(message: telebot.types.Message):
    user_id = message.from_user.id

            
    if user_id in admin_ids:
        try:
                    
                    user_to_add = message.text.split()[1]
                    allowed_users.append(int(user_to_add))  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π ID –≤ —Å–ø–∏—Å–æ–∫
                    save_allowed_users()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_to_add} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        except (IndexError, ValueError):
                    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    else:
                bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['remove'])
def remove_allowed_user(message: telebot.types.Message):
    user_id = message.from_user.id

    if user_id in admin_ids:
        try:
            user_to_remove = message.text.split()[1]
            user_to_remove_id = int(user_to_remove)

            if user_to_remove_id in allowed_users:
                allowed_users.remove(user_to_remove_id)  # –£–¥–∞–ª—è–µ–º ID –∏–∑ —Å–ø–∏—Å–∫–∞
                save_allowed_users()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_to_remove} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.")
        except (IndexError, ValueError):
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message):
    user_id = message.from_user.id
    if user_id in allowed_users:
        bot.send_video(message.chat.id, open("vid.mp4", 'rb'), caption="–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ—Å - /snos + —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞.\n–ü—Ä–∏–º–µ—Ä: /snos https://t.me/–≥—Ä—É–ø–ø–∞/–Ω–æ–º–µ—Ä—Å–æ–æ–±—â–µ–Ω–∏—è\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ 5 –∂–∞–ª–æ–± –µ—Å–ª–∏ —Å–Ω–æ—Å –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç!\n–û–±–Ω–æ–≤–ª–µ–Ω–∏—è/–Ω–æ–≤–æ—Å—Ç–∏ - https://t.me/+Jjvcy_gFSQQzYzky")
    else:  # This 'else' block is for users NOT in 'allowed_users'
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", url="https://t.me/+Jjvcy_gFSQQzYzky"))
        bot.send_video(message.chat.id, open("vid.mp4", 'rb'), caption="–£ –≤–∞—Å –Ω–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∏–∂–µ. –¶–µ–Ω–∞: 300‚ÇΩ/–æ—Ç–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç/$\n–ù–æ–≤–æ—Å—Ç–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - https://t.me/+Jjvcy_gFSQQzYzky", reply_markup=markup)
    add_user_id(message.chat.id)

@bot.message_handler(commands=['snos'])
def handle_link(message: telebot.types.Message):
    user_id = message.from_user.id
    current_time = time.time()

    # Check if the user is in allowed_users
    if user_id not in allowed_users:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞", url="https://t.me/+Jjvcy_gFSQQzYzky"))
        bot.send_video(message.chat.id, open("vid.mp4", 'rb'), caption="–£ –≤–∞—Å –Ω–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∏–∂–µ. –¶–µ–Ω–∞: 300‚ÇΩ/–æ—Ç–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç/$\n–ù–æ–≤–æ—Å—Ç–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - https://t.me/+Jjvcy_gFSQQzYzky", reply_markup=markup)
        return

    # Check if one minute has passed since the last request
    if user_id in last_request_time:
        elapsed_time = current_time - last_request_time[user_id]
        if elapsed_time < 300:  # 60 seconds
            remaining_time = 300 - int(elapsed_time)
            bot.reply_to(message, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥(—ã) –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º. –ù–µ —Å–ø–∞–º—å—Ç–µ!")
            return

    # Update the last request time
    last_request_time[user_id] = current_time

    # Process the link and add exception handling
    message_link = message.text
    try:
        asyncio.run(process_link(message.chat.id, message_link))  # Make sure process_link is a coroutine
    except sqlite3.OperationalError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞! –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        # Restart the bot
        restart_bot()

async def process_link(chat_id, message_link):
    tasks = [report_spam(chat_id, account, message_link) for account in accounts]
    await asyncio.gather(*tasks)

async def report_spam(chat_id, account, message_link):
    client = TelegramClient(account['session_name'], account['api_id'], account['api_hash'])

    try:
        await client.start()
        await client.sign_in(phone=account['phone'])
    except SessionPasswordNeededError:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
        password_msg = bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è {account["phone"]}: ')
        bot.register_next_step_handler(password_msg, lambda msg: handle_password(msg, account, message_link, client))
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è

    print("–ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Å—ã–ª–∫–∏...")
    match = re.search(r't.me/([^/]+)/(\d+)', message_link)
    if match:
        group_username = match.group(1)
        message_id = int(match.group(2))

        print(f"–ì—Ä—É–ø–ø–∞: {group_username}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã
        report_message = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤–∫–∞...")

        try:
            message = await client.get_messages(group_username, ids=message_id)
            sender_id = message.from_id  # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            if sender_id in admin_ids:
                bot.send_message(chat_id, "–°#—É–∫–∞ –º—ã —Ç–µ–±–µ —Ö–ª–µ–± —Å –º–∞—Å–ª–æ–º –∞ —Ç—ã —Ç–∞–∫")
                return
            
            await client(functions.messages.ReportSpamRequest(peer=message.peer_id))
            
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=report_message.message_id,
                text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
            )

        except sqlite3.OperationalError:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É/–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ!")
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            restart_bot()
            return
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã: {e}")
            return

    else:
        bot.send_message(chat_id, "–ù–µ –≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!")

def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    os.execv(sys.executable, ['python'] + sys.argv)



def handle_password(msg, account, message_link, client):
    password = msg.text
    try:
        asyncio.run(client.sign_in(password=password))
        asyncio.run(report_spam(msg.chat.id, account, message_link, client))
    except Exception as e:
        bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")


@bot.message_handler(commands=['send'])
def handle_broadcast(message):
    global broadcast_text, broadcast_photo  # Access global variables
    if message.from_user.id == admin_id:
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        broadcast_text = ""  # Reset text
        broadcast_photo = None  # Reset photo
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_broadcast_text)
    else:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∞–¥–º–∏–Ω, –Ω–µ –ª–µ–∑—å!")
@bot.message_handler(func=lambda message: message.text == '/cancel')
def handle_cancel(message):
    global broadcast_text, broadcast_photo
    if message.from_user.id == admin_id:
        broadcast_text = ""
        broadcast_photo = None
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        panel(message)
        return

    else:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∞–¥–º–∏–Ω, –Ω–µ –ª–µ–∑—å!")
def process_broadcast_text(message):
    global broadcast_text, broadcast_photo
    if message.from_user.id == admin_id:
        if message.text == "/cancel":
            handle_cancel(message)  # Call the cancel handler
            return
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        broadcast_text = message.text
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /next, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ):", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_broadcast_photo)
def process_broadcast_photo(message):
    global broadcast_text, broadcast_photo
    if message.from_user.id == admin_id:
        if message.text == "/cancel":
            handle_cancel(message)  # Call the cancel handler
            return
        if message.photo:
            photo_file_id = message.photo[-1].file_id
            broadcast_photo = bot.get_file(photo_file_id)
            downloaded_photo = bot.download_file(broadcast_photo.file_path)
            with open('broadcast_photo.png', 'wb') as f:
                f.write(downloaded_photo)
        send_broadcast(message)
def send_broadcast(message):
    global broadcast_text, broadcast_photo
    try:
        with open(user_ids_file,  'r') as file:
            user_ids = json.load(file)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–§–∞–π–ª —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    for user_id in user_ids:
        try:
            if broadcast_photo:
                bot.send_photo(int(user_id), photo=open('broadcast_photo.png', 'rb'), caption=broadcast_text, parse_mode="Markdown")
            else:
                bot.send_message(int(user_id), broadcast_text, parse_mode="Markdown")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    bot.send_message(message.chat.id, "*–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.*", parse_mode="Markdown")





broadcast_text = ""
broadcast_link = ""
button_text = ""
broadcast_photo = None
@bot.message_handler(commands=['send1'])
def handle_broadcast_button(message):
    global broadcast_text, broadcast_link, button_text, broadcast_photo
    if message.from_user.id == admin_id:

        broadcast_text = ""  # Reset text
        broadcast_link = ""  # Reset link
        button_text = ""  # Reset button text
        broadcast_photo = None  # Reset photo
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_broadcast_button_text)
    else:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∞–¥–º–∏–Ω, –Ω–µ –ª–µ–∑—å!")
@bot.message_handler(func=lambda message: message.text == '/cancel')
def handle_cancel(message):
    global broadcast_text, broadcast_link, button_text, broadcast_photo
    if message.from_user.id == admin_id:
        broadcast_text = ""
        broadcast_link = ""
        button_text = ""
        broadcast_photo = None
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.\n–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å.")
    else:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∞–¥–º–∏–Ω, –Ω–µ –ª–µ–∑—å!")
def process_broadcast_button_text(message):
    global broadcast_text, broadcast_link, button_text, broadcast_photo
    if message.from_user.id == admin_id:
        if message.text == "/cancel":
            handle_cancel(message)
            return
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        broadcast_text = message.text
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_broadcast_button_link)
def process_broadcast_button_link(message):
    global broadcast_text, broadcast_link, button_text, broadcast_photo
    if message.from_user.id == admin_id:
        if message.text == "/cancel":
            handle_cancel(message)
            return
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        broadcast_link = message.text
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_broadcast_button_button_text)
def process_broadcast_button_button_text(message):
    global broadcast_text, broadcast_link, button_text, broadcast_photo
    if message.from_user.id == admin_id:
        if message.text == "/cancel":
            handle_cancel(message)
            return
        button_text = message.text
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /nextstep, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ):", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_broadcast_button_photo)
def process_broadcast_button_photo(message):
    global broadcast_text, broadcast_link, button_text, broadcast_photo
    if message.from_user.id == admin_id:
        if message.text == "/cancel":
            handle_cancel(message)
            return
        if message.photo:
            photo_file_id = message.photo[-1].file_id
            broadcast_photo = bot.get_file(photo_file_id)
            downloaded_photo = bot.download_file(broadcast_photo.file_path)
            with open('broadcast_photo.png', 'wb') as f:
                f.write(downloaded_photo)
        send_broadcast_button(message)
def send_broadcast_button(message):
    user_ids_file = 'user_ids.json'
    global broadcast_text, broadcast_link, button_text, broadcast_photo
    try:
        with open(user_ids_file, 'r') as file:
            user_ids = json.load(file)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–§–∞–π–ª —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    for user_id in user_ids:
        try:
            markup = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text=button_text, url=broadcast_link)
            markup.add(button)
            if broadcast_photo:
                bot.send_photo(int(user_id), photo=open('broadcast_photo.png', 'rb'), caption=broadcast_text, reply_markup=markup, parse_mode="Markdown")
            else:
                bot.send_message(int(user_id), broadcast_text, reply_markup=markup, parse_mode="Markdown")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    bot.send_message(message.chat.id, "*–†–∞—Å—Å—ã–ª–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.*", parse_mode="Markdown")
# Function to generate a unique screenshot name

@bot.callback_query_handler(func=lambda call: call.data == "cancel")
def cancel(call):
    
    user_states.pop(call.message.chat.id, None)
    bot.send_message(call.message.chat.id, "*–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.*", parse_mode="Markdown")
    bot.clear_step_handler_by_chat_id(call.message.chat.id)

user_states = {}



    
if __name__ == "__main__":
    init_db()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É
    bot.polling()
